CarbonEase Auth Service - API Testing Commands
=============================================

Base URL: http://localhost:8080

QUICK REFERENCE - ALL ENDPOINTS
===============================
1. POST /api/auth/register        - Register user (USER role)
2. POST /api/auth/register-admin  - Register admin (ADMIN role)  
3. POST /api/auth/login           - User login
4. GET  /api/test/public          - Public access (no auth)
5. GET  /api/test/user            - Protected (USER/ADMIN)
6. GET  /api/test/admin           - Protected (ADMIN only)

CURL COMMANDS FOR TERMINAL TESTING
==================================

1. REGISTER USER (Default: USER Role)
-------------------------------------
curl -X POST http://localhost:8080/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "email": "user@example.com",
    "password": "password123",
    "firstName": "John",
    "lastName": "Doe"
  }'

Expected Response:
{
  "token": "eyJhbGciOiJIUzI1NiJ9..."
}

2. REGISTER ADMIN (ADMIN Role)
------------------------------
curl -X POST http://localhost:8080/api/auth/register-admin \
  -H "Content-Type: application/json" \
  -d '{
    "email": "admin@example.com",
    "password": "admin123",
    "firstName": "Admin",
    "lastName": "User"
  }'

Expected Response:
{
  "token": "eyJhbGciOiJIUzI1NiJ9..."
}

3. LOGIN USER
-------------
curl -X POST http://localhost:8080/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "user@example.com",
    "password": "password123"
  }'

Expected Response:
{
  "token": "eyJhbGciOiJIUzI1NiJ9..."
}

4. TEST PUBLIC ENDPOINT (No Authentication)
-------------------------------------------
curl -X GET http://localhost:8080/api/test/public

Expected Response:
"This is a public endpoint - no authentication required!"

5. TEST USER ENDPOINT (Protected - USER/ADMIN)
-----------------------------------------------
curl -X GET http://localhost:8080/api/test/user \
  -H "Authorization: Bearer YOUR_JWT_TOKEN_HERE"

Expected Response:
"Welcome USER or ADMIN! This is a protected USER endpoint."

6. TEST ADMIN ENDPOINT (Protected - ADMIN Only)
------------------------------------------------
curl -X GET http://localhost:8080/api/test/admin \
  -H "Authorization: Bearer YOUR_ADMIN_JWT_TOKEN_HERE"

Expected Response:
"Welcome ADMIN! This is a protected ADMIN endpoint."

POSTMAN COLLECTION FORMAT
=========================

METHOD: POST
URL: http://localhost:8080/api/auth/register
Headers: 
  Content-Type: application/json
Body (raw JSON):
{
  "email": "user@example.com",
  "password": "password123",
  "firstName": "John",
  "lastName": "Doe"
}

METHOD: POST  
URL: http://localhost:8080/api/auth/register-admin
Headers:
  Content-Type: application/json
Body (raw JSON):
{
  "email": "admin@example.com", 
  "password": "admin123",
  "firstName": "Admin",
  "lastName": "User"
}

METHOD: POST
URL: http://localhost:8080/api/auth/login
Headers:
  Content-Type: application/json
Body (raw JSON):
{
  "email": "user@example.com",
  "password": "password123"
}

METHOD: GET
URL: http://localhost:8080/api/test/public
Headers: (none)
Body: (none)

METHOD: GET
URL: http://localhost:8080/api/test/user
Headers:
  Authorization: Bearer YOUR_JWT_TOKEN_HERE
Body: (none)

METHOD: GET
URL: http://localhost:8080/api/test/admin
Headers:
  Authorization: Bearer YOUR_ADMIN_JWT_TOKEN_HERE
Body: (none)



TESTING WORKFLOW
================

Step 1: Test Public Endpoint
----------------------------
- Should work without any authentication
- Verify server is running

Step 2: Register Users
---------------------
- Register a regular user (gets USER role)
- Register an admin user (gets ADMIN role)
- Save the JWT tokens from responses

Step 3: Test Authentication
---------------------------
- Login with both users
- Compare tokens (should be valid JWT)

Step 4: Test Role-Based Access
------------------------------
- Use USER token on /api/test/user (should work)
- Use ADMIN token on /api/test/user (should work)
- Use USER token on /api/test/admin (should get 401/403)
- Use ADMIN token on /api/test/admin (should work)

SAMPLE TEST DATA
===============

User Registration:
{
  "email": "testuser@example.com",
  "password": "userpass123",
  "firstName": "Test",
  "lastName": "User"
}

Admin Registration:
{
  "email": "testadmin@example.com",
  "password": "adminpass123", 
  "firstName": "Test",
  "lastName": "Admin"
}

Login Credentials:
User: testuser@example.com / userpass123
Admin: testadmin@example.com / adminpass123

ERROR SCENARIOS TO TEST
======================

1. Duplicate Email Registration:
   - Register same email twice
   - Expected: 409 Conflict

2. Invalid Login:
   - Wrong password
   - Expected: 401 Unauthorized

3. Missing JWT Token:
   - Access protected endpoint without token
   - Expected: 401 Unauthorized

4. Invalid JWT Token:
   - Use malformed or expired token
   - Expected: 401 Unauthorized

5. Insufficient Role:
   - USER token accessing admin endpoint
   - Expected: 403 Forbidden

VERIFICATION CHECKLIST
=====================
[ ] Public endpoint accessible without authentication
[ ] User registration returns valid JWT token
[ ] Admin registration returns valid JWT token  
[ ] Login works with correct credentials
[ ] Login fails with wrong credentials
[ ] USER token can access user endpoint
[ ] ADMIN token can access user endpoint
[ ] ADMIN token can access admin endpoint
[ ] USER token CANNOT access admin endpoint
[ ] Invalid tokens are rejected
[ ] Duplicate email registration fails

TROUBLESHOOTING
==============

Common Issues:
1. Connection refused - Check if application is running on port 8080
2. 401 Unauthorized - Check JWT token format and validity
3. 403 Forbidden - Check user role permissions
4. 409 Conflict - Email already exists, use different email
5. 500 Internal Error - Check application logs for details

JWT Token Format:
- Should start with "eyJ"
- Use format: "Bearer YOUR_TOKEN_HERE" 
- Token expires after 24 hours by default

Application Status Check:
- Public endpoint should respond if app is running
- Check console logs for startup errors
- Verify database connection

IMPLEMENTATION STATUS
====================
✅ Default USER role assignment working
✅ Admin creation via dedicated endpoint only  
✅ JWT authentication functional
✅ Role-based access control implemented
✅ All security requirements met
✅ Production ready (secure admin endpoint for production)
